// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
struct LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class MsgHeader;
struct MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class RegEeq;
struct RegEeqDefaultTypeInternal;
extern RegEeqDefaultTypeInternal _RegEeq_default_instance_;
class RegRsp;
struct RegRspDefaultTypeInternal;
extern RegRspDefaultTypeInternal _RegRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LoginReq* Arena::CreateMaybeMessage<::LoginReq>(Arena*);
template<> ::LoginRsp* Arena::CreateMaybeMessage<::LoginRsp>(Arena*);
template<> ::MsgHeader* Arena::CreateMaybeMessage<::MsgHeader>(Arena*);
template<> ::RegEeq* Arena::CreateMaybeMessage<::RegEeq>(Arena*);
template<> ::RegRsp* Arena::CreateMaybeMessage<::RegRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MsgHeader_MsgYype : int {
  MsgHeader_MsgYype_RegReq = 0,
  MsgHeader_MsgYype_RegRsp = 1,
  MsgHeader_MsgYype_LoginReq = 2,
  MsgHeader_MsgYype_LoginRsp = 3,
  MsgHeader_MsgYype_LogoutReq = 4,
  MsgHeader_MsgYype_LogoutRsp = 5,
  MsgHeader_MsgYype_AddFriendReq = 6,
  MsgHeader_MsgYype_AddFriendRsp = 7,
  MsgHeader_MsgYype_DelFriendReq = 8,
  MsgHeader_MsgYype_DelFriendRsp = 9,
  MsgHeader_MsgYype_PublishMessageReq = 10,
  MsgHeader_MsgYype_PubilishMessageRsp = 11,
  MsgHeader_MsgYype_MsgHeader_MsgYype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgHeader_MsgYype_MsgHeader_MsgYype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgHeader_MsgYype_IsValid(int value);
constexpr MsgHeader_MsgYype MsgHeader_MsgYype_MsgYype_MIN = MsgHeader_MsgYype_RegReq;
constexpr MsgHeader_MsgYype MsgHeader_MsgYype_MsgYype_MAX = MsgHeader_MsgYype_PubilishMessageRsp;
constexpr int MsgHeader_MsgYype_MsgYype_ARRAYSIZE = MsgHeader_MsgYype_MsgYype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgHeader_MsgYype_descriptor();
template<typename T>
inline const std::string& MsgHeader_MsgYype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgHeader_MsgYype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgHeader_MsgYype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgHeader_MsgYype_descriptor(), enum_t_value);
}
inline bool MsgHeader_MsgYype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgHeader_MsgYype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgHeader_MsgYype>(
    MsgHeader_MsgYype_descriptor(), name, value);
}
// ===================================================================

class MsgHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgHeader) */ {
 public:
  inline MsgHeader() : MsgHeader(nullptr) {}
  ~MsgHeader() override;
  explicit PROTOBUF_CONSTEXPR MsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgHeader(const MsgHeader& from);
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgHeader& from) {
    MsgHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgHeader";
  }
  protected:
  explicit MsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgHeader_MsgYype MsgYype;
  static constexpr MsgYype RegReq =
    MsgHeader_MsgYype_RegReq;
  static constexpr MsgYype RegRsp =
    MsgHeader_MsgYype_RegRsp;
  static constexpr MsgYype LoginReq =
    MsgHeader_MsgYype_LoginReq;
  static constexpr MsgYype LoginRsp =
    MsgHeader_MsgYype_LoginRsp;
  static constexpr MsgYype LogoutReq =
    MsgHeader_MsgYype_LogoutReq;
  static constexpr MsgYype LogoutRsp =
    MsgHeader_MsgYype_LogoutRsp;
  static constexpr MsgYype AddFriendReq =
    MsgHeader_MsgYype_AddFriendReq;
  static constexpr MsgYype AddFriendRsp =
    MsgHeader_MsgYype_AddFriendRsp;
  static constexpr MsgYype DelFriendReq =
    MsgHeader_MsgYype_DelFriendReq;
  static constexpr MsgYype DelFriendRsp =
    MsgHeader_MsgYype_DelFriendRsp;
  static constexpr MsgYype PublishMessageReq =
    MsgHeader_MsgYype_PublishMessageReq;
  static constexpr MsgYype PubilishMessageRsp =
    MsgHeader_MsgYype_PubilishMessageRsp;
  static inline bool MsgYype_IsValid(int value) {
    return MsgHeader_MsgYype_IsValid(value);
  }
  static constexpr MsgYype MsgYype_MIN =
    MsgHeader_MsgYype_MsgYype_MIN;
  static constexpr MsgYype MsgYype_MAX =
    MsgHeader_MsgYype_MsgYype_MAX;
  static constexpr int MsgYype_ARRAYSIZE =
    MsgHeader_MsgYype_MsgYype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgYype_descriptor() {
    return MsgHeader_MsgYype_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgYype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgYype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgYype_Name.");
    return MsgHeader_MsgYype_Name(enum_t_value);
  }
  static inline bool MsgYype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgYype* value) {
    return MsgHeader_MsgYype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // .MsgHeader.MsgYype type = 2;
  void clear_type();
  ::MsgHeader_MsgYype type() const;
  void set_type(::MsgHeader_MsgYype value);
  private:
  ::MsgHeader_MsgYype _internal_type() const;
  void _internal_set_type(::MsgHeader_MsgYype value);
  public:

  // @@protoc_insertion_point(class_scope:MsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t version_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegEeq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegEeq) */ {
 public:
  inline RegEeq() : RegEeq(nullptr) {}
  ~RegEeq() override;
  explicit PROTOBUF_CONSTEXPR RegEeq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegEeq(const RegEeq& from);
  RegEeq(RegEeq&& from) noexcept
    : RegEeq() {
    *this = ::std::move(from);
  }

  inline RegEeq& operator=(const RegEeq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegEeq& operator=(RegEeq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegEeq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegEeq* internal_default_instance() {
    return reinterpret_cast<const RegEeq*>(
               &_RegEeq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegEeq& a, RegEeq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegEeq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegEeq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegEeq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegEeq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegEeq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegEeq& from) {
    RegEeq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegEeq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegEeq";
  }
  protected:
  explicit RegEeq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kFromFieldNumber = 4,
  };
  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::MsgHeader* release_header();
  ::MsgHeader* mutable_header();
  void set_allocated_header(::MsgHeader* header);
  private:
  const ::MsgHeader& _internal_header() const;
  ::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::MsgHeader* header);
  ::MsgHeader* unsafe_arena_release_header();

  // uint32 from = 4;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RegEeq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::MsgHeader* header_;
    uint32_t from_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegRsp) */ {
 public:
  inline RegRsp() : RegRsp(nullptr) {}
  ~RegRsp() override;
  explicit PROTOBUF_CONSTEXPR RegRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegRsp(const RegRsp& from);
  RegRsp(RegRsp&& from) noexcept
    : RegRsp() {
    *this = ::std::move(from);
  }

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRsp& operator=(RegRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegRsp* internal_default_instance() {
    return reinterpret_cast<const RegRsp*>(
               &_RegRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegRsp& a, RegRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegRsp& from) {
    RegRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegRsp";
  }
  protected:
  explicit RegRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRetFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // .MsgHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::MsgHeader& header() const;
  PROTOBUF_NODISCARD ::MsgHeader* release_header();
  ::MsgHeader* mutable_header();
  void set_allocated_header(::MsgHeader* header);
  private:
  const ::MsgHeader& _internal_header() const;
  ::MsgHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::MsgHeader* header);
  ::MsgHeader* unsafe_arena_release_header();

  // uint32 ret = 2;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // uint32 user_id = 3;
  void clear_user_id();
  uint32_t user_id() const;
  void set_user_id(uint32_t value);
  private:
  uint32_t _internal_user_id() const;
  void _internal_set_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RegRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::MsgHeader* header_;
    uint32_t ret_;
    uint32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit PROTOBUF_CONSTEXPR LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginReq& from) {
    LoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  ~LoginRsp() override;
  explicit PROTOBUF_CONSTEXPR LoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRsp& from) {
    LoginRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    uint32_t ret_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader

// int32 version = 1;
inline void MsgHeader::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t MsgHeader::_internal_version() const {
  return _impl_.version_;
}
inline int32_t MsgHeader::version() const {
  // @@protoc_insertion_point(field_get:MsgHeader.version)
  return _internal_version();
}
inline void MsgHeader::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void MsgHeader::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:MsgHeader.version)
}

// .MsgHeader.MsgYype type = 2;
inline void MsgHeader::clear_type() {
  _impl_.type_ = 0;
}
inline ::MsgHeader_MsgYype MsgHeader::_internal_type() const {
  return static_cast< ::MsgHeader_MsgYype >(_impl_.type_);
}
inline ::MsgHeader_MsgYype MsgHeader::type() const {
  // @@protoc_insertion_point(field_get:MsgHeader.type)
  return _internal_type();
}
inline void MsgHeader::_internal_set_type(::MsgHeader_MsgYype value) {
  
  _impl_.type_ = value;
}
inline void MsgHeader::set_type(::MsgHeader_MsgYype value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MsgHeader.type)
}

// -------------------------------------------------------------------

// RegEeq

// .MsgHeader header = 1;
inline bool RegEeq::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RegEeq::has_header() const {
  return _internal_has_header();
}
inline void RegEeq::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::MsgHeader& RegEeq::_internal_header() const {
  const ::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgHeader&>(
      ::_MsgHeader_default_instance_);
}
inline const ::MsgHeader& RegEeq::header() const {
  // @@protoc_insertion_point(field_get:RegEeq.header)
  return _internal_header();
}
inline void RegEeq::unsafe_arena_set_allocated_header(
    ::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegEeq.header)
}
inline ::MsgHeader* RegEeq::release_header() {
  
  ::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MsgHeader* RegEeq::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:RegEeq.header)
  
  ::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::MsgHeader* RegEeq::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::MsgHeader* RegEeq::mutable_header() {
  ::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:RegEeq.header)
  return _msg;
}
inline void RegEeq::set_allocated_header(::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RegEeq.header)
}

// string user_name = 2;
inline void RegEeq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& RegEeq::user_name() const {
  // @@protoc_insertion_point(field_get:RegEeq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegEeq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegEeq.user_name)
}
inline std::string* RegEeq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:RegEeq.user_name)
  return _s;
}
inline const std::string& RegEeq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void RegEeq::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegEeq::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegEeq::release_user_name() {
  // @@protoc_insertion_point(field_release:RegEeq.user_name)
  return _impl_.user_name_.Release();
}
inline void RegEeq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegEeq.user_name)
}

// string password = 3;
inline void RegEeq::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RegEeq::password() const {
  // @@protoc_insertion_point(field_get:RegEeq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegEeq::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegEeq.password)
}
inline std::string* RegEeq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:RegEeq.password)
  return _s;
}
inline const std::string& RegEeq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void RegEeq::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* RegEeq::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* RegEeq::release_password() {
  // @@protoc_insertion_point(field_release:RegEeq.password)
  return _impl_.password_.Release();
}
inline void RegEeq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegEeq.password)
}

// uint32 from = 4;
inline void RegEeq::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t RegEeq::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t RegEeq::from() const {
  // @@protoc_insertion_point(field_get:RegEeq.from)
  return _internal_from();
}
inline void RegEeq::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void RegEeq::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:RegEeq.from)
}

// -------------------------------------------------------------------

// RegRsp

// .MsgHeader header = 1;
inline bool RegRsp::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool RegRsp::has_header() const {
  return _internal_has_header();
}
inline void RegRsp::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
inline const ::MsgHeader& RegRsp::_internal_header() const {
  const ::MsgHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgHeader&>(
      ::_MsgHeader_default_instance_);
}
inline const ::MsgHeader& RegRsp::header() const {
  // @@protoc_insertion_point(field_get:RegRsp.header)
  return _internal_header();
}
inline void RegRsp::unsafe_arena_set_allocated_header(
    ::MsgHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegRsp.header)
}
inline ::MsgHeader* RegRsp::release_header() {
  
  ::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MsgHeader* RegRsp::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:RegRsp.header)
  
  ::MsgHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::MsgHeader* RegRsp::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgHeader>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::MsgHeader* RegRsp::mutable_header() {
  ::MsgHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:RegRsp.header)
  return _msg;
}
inline void RegRsp::set_allocated_header(::MsgHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RegRsp.header)
}

// uint32 ret = 2;
inline void RegRsp::clear_ret() {
  _impl_.ret_ = 0u;
}
inline uint32_t RegRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t RegRsp::ret() const {
  // @@protoc_insertion_point(field_get:RegRsp.ret)
  return _internal_ret();
}
inline void RegRsp::_internal_set_ret(uint32_t value) {
  
  _impl_.ret_ = value;
}
inline void RegRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:RegRsp.ret)
}

// uint32 user_id = 3;
inline void RegRsp::clear_user_id() {
  _impl_.user_id_ = 0u;
}
inline uint32_t RegRsp::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint32_t RegRsp::user_id() const {
  // @@protoc_insertion_point(field_get:RegRsp.user_id)
  return _internal_user_id();
}
inline void RegRsp::_internal_set_user_id(uint32_t value) {
  
  _impl_.user_id_ = value;
}
inline void RegRsp::set_user_id(uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:RegRsp.user_id)
}

// -------------------------------------------------------------------

// LoginReq

// string user_name = 1;
inline void LoginReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:LoginReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginReq.user_name)
}
inline std::string* LoginReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:LoginReq.user_name)
  return _s;
}
inline const std::string& LoginReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void LoginReq::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:LoginReq.user_name)
  return _impl_.user_name_.Release();
}
inline void LoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginReq.user_name)
}

// string password = 2;
inline void LoginReq::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:LoginReq.password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:LoginReq.password)
  return _impl_.password_.Release();
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRsp

// uint32 ret = 1;
inline void LoginRsp::clear_ret() {
  _impl_.ret_ = 0u;
}
inline uint32_t LoginRsp::_internal_ret() const {
  return _impl_.ret_;
}
inline uint32_t LoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:LoginRsp.ret)
  return _internal_ret();
}
inline void LoginRsp::_internal_set_ret(uint32_t value) {
  
  _impl_.ret_ = value;
}
inline void LoginRsp::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginRsp.ret)
}

// string user_id = 2;
inline void LoginRsp::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& LoginRsp::user_id() const {
  // @@protoc_insertion_point(field_get:LoginRsp.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRsp::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginRsp.user_id)
}
inline std::string* LoginRsp::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:LoginRsp.user_id)
  return _s;
}
inline const std::string& LoginRsp::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void LoginRsp::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRsp::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:LoginRsp.user_id)
  return _impl_.user_id_.Release();
}
inline void LoginRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginRsp.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MsgHeader_MsgYype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgHeader_MsgYype>() {
  return ::MsgHeader_MsgYype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
